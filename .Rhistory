nazwa_przedmiotu=x[4],
skrotowiec=skrot)
cat("Nazwa przedmiotu:",ramkaPrzedmiot$nazwa_przedmiotu,"(",ramkaPrzedmiot$skrotowiec,")\n",
"Godzina egzaminu:",ramkaPrzedmiot$czas_egzaminu,"\n",
"Sala egzaminacyjna:",ramkaPrzedmiot$sala,"\n",
"Do egzaminu pozostało",difftime(ramkaPrzedmiot$czas_egzaminu,Sys.Date(),units="days"),"\n")
)
return(ramkaPrzedmiot)
}
przedmiot(wektor)
przedmiot <- function(x){
#tworze skrotowiec
przedmiotSlowa <- stri_extract_all_words(x[4])
przedmiotSlowa <- unlist(przedmiotSlowa)
przedmiotSlowa <- stri_trans_totitle(przedmiotSlowa)
skrot <- stri_paste(substr(przedmiotSlowa,1,2),collapse="")
ramkaPrzedmiot <- data.frame(czas_egzaminu=x[2],
data_egzaminu=x[1],
sala=x[3],
nazwa_przedmiotu=x[4],
skrotowiec=skrot)
cat("Nazwa przedmiotu:",ramkaPrzedmiot$nazwa_przedmiotu,"(",ramkaPrzedmiot$skrotowiec,")\n",
"Godzina egzaminu:",ramkaPrzedmiot$czas_egzaminu,"\n",
"Sala egzaminacyjna:",ramkaPrzedmiot$sala,"\n"
)
return(ramkaPrzedmiot)
}
przedmiot(wektor)
przedmiot <- function(x){
#tworze skrotowiec
przedmiotSlowa <- stri_extract_all_words(x[4])
przedmiotSlowa <- unlist(przedmiotSlowa)
przedmiotSlowa <- stri_trans_totitle(przedmiotSlowa)
skrot <- stri_paste(substr(przedmiotSlowa,1,2),collapse="")
ramkaPrzedmiot <- data.frame(czas_egzaminu=x[2],
data_egzaminu=x[1],
sala=x[3],
nazwa_przedmiotu=x[4],
skrotowiec=skrot)
cat("Nazwa przedmiotu:",ramkaPrzedmiot$nazwa_przedmiotu,"(",ramkaPrzedmiot$skrotowiec,")\n",
"Godzina egzaminu:",ramkaPrzedmiot$czas_egzaminu,"\n",
"Sala egzaminacyjna:",ramkaPrzedmiot$sala,"\n\n"
)
return(ramkaPrzedmiot)
}
przedmiot(wektor)
b <- c(1,3,4,5,5)
d <- c(2,3,3,4,5)
plot(b,d,xlab="wektor b", ylab="wektor d", col="red",pch=19,bty="n",xlim=c(0,5),
ylim=c(0,5))
lines(b,d,lwd=2)
legend("bottomleft",c("punkty złożone ze wspolrzednych b x d"), col="red",
pch=c(19),ncol=2)
#P2.1
x <- runif(300, min=-10, max=10)
y <- 0.1*x^3 - 0.5*x^2 + rnorm(length(x),0,8)
plot(x,y,xlab="x", ylab="y", col="orange", pch=19,bty="n",xlim=c(0,12),
ylim=c(0,70))
(model <- lm(y~ x+I(x^3)))
# dopasowanie
(dop <- predict(model))
(srt <- sort(x, index.return=T))
# dodajemy krzywa regresji do wykresu
lines(x[srt$ix],dop[srt$ix],col=2,lwd=2)
iris
x <- iris$Sepal.Length; y <- iris$Petal.Length
plot(x,y,xlab="x", ylab="y", col="orange", pch=19,bty="n",xlim=c(0,10),
ylim=c(0,8))
(model <- lm(y~ x+I(x^3)))
# dopasowanie
(dop <- predict(model))
(srt <- sort(x, index.return=T))
# dodajemy krzywa regresji do wykresu
lines(x[srt$ix],dop[srt$ix],col=2,lwd=2)
(macierz <- matrix(sample(1:30,15), nrow=3))
colnames(macierz) <- c('A','B','C','D','E')
rownames(macierz) <- c('var1','var2','var3')
macierz
#P.1
barplot(macierz, font.lab=2,font.axis=2, xlab="grupa", col=c("red","blue","green"),
legend = rownames(macierz),beside=T)
#P.2
barplot(macierz, font.axis=2, xlab="grupa", col=c("red","blue","green"),
legend = rownames(macierz))
#P.3
barplot(macierz, xlab="grupa", col=c("red","blue","green"),
legend = rownames(macierz))
library(colorspace)
paleta <- choose_palette()
View(paleta)
(pa <- paleta(3))
x1 <- x2 <- seq(-3,3, length=100)
f <- function(x1,x2){(2*x1/(exp(x1^2+x2^2)))+((x1^2+x2^2)/16)+(sin(x1+x2))/2}
z <- outer(x1,x2,f)
# automatyczny eksport do png
png("Wykres_3D.png",width=1050,height=1050)
pdf('Wykres_3D.pdf',width=1050,height=1050)
persp(x1,x2,z,col=paleta(6),phi=30,theta=150)
dev.off()
contour(x1,x2,z)
install.packages("plot3D")
library(plot3D)
x1 <- x2 <- seq(-3,3, length=100)
f <- function(x1,x2){(2*x1/(exp(x1^2+x2^2)))+((x1^2+x2^2)/16)+(sin(x1+x2))/2}
z <- outer(x1,x2,f)
persp3D(x1,x2,z,col=paleta(6),phi=30,theta=150,
expand=0.7,border=NA,shade=0,
ticktype="detailed")
install.packages("rgl")
library(rgl)
open3d()
x1 <- x2 <- seq(-3,3, length=100)
f <- function(x1,x2){(2*x1/(exp(x1^2+x2^2)))+((x1^2+x2^2)/16)+(sin(x1+x2))/2}
library(rvest)
LigaAngielska <- data.frame()
for (i in 1:14){
link <- glue::glue("https://www.worldfootball.net/players_list/eng-premier-league-2021-2022/nach-name/{i}/")
url1 <- link
path <- "/html/body/div[3]/div[2]/div[4]/div[2]/div[1]/div[1]/div[3]/div/table"
outn <- html_nodes(read_html(url1),xpath=path)
(strona <- html_table(outn))
strona <- strona[[1]]
LigaAngielska <- rbind(LigaAngielska,strona)
}
as.data.frame(LigaAngielska)
LigaAngielska <- LigaAngielska[-2]
LigaFrancuska <- data.frame()
for (i in 1:14){
link <- glue::glue("https://www.worldfootball.net/players_list/fra-ligue-1-2021-2022/nach-name/{i}/")
url1 <- link
path <- "/html/body/div[3]/div[2]/div[4]/div[2]/div[1]/div[1]/div[3]/div/table"
outn <- html_nodes(read_html(url1),xpath=path)
(strona <- html_table(outn))
strona <- strona[[1]]
LigaFrancuska <- rbind(LigaFrancuska,strona)
}
as.data.frame(LigaFrancuska)
LigaFrancuska <- LigaFrancuska[-2]
LigaNiemiecka <- data.frame()
for (i in 1:12){
link <- glue::glue("https://www.worldfootball.net/players_list/bundesliga-2021-2022/nach-name/{i}/")
url1 <- link
path <- "/html/body/div[3]/div[2]/div[4]/div[2]/div[1]/div[1]/div[3]/div/table"
outn <- html_nodes(read_html(url1),xpath=path)
(strona <- html_table(outn))
strona <- strona[[1]]
LigaNiemiecka <- rbind(LigaNiemiecka,strona)
}
as.data.frame(LigaNiemiecka)
LigaNiemiecka <- LigaNiemiecka[-2]
LigaWloska <- data.frame()
for (i in 1:12){
link <- glue::glue("https://www.worldfootball.net/players_list/ita-serie-a-2021-2022/nach-name/{i}/")
url1 <- link
path <- "/html/body/div[3]/div[2]/div[4]/div[2]/div[1]/div[1]/div[3]/div/table"
outn <- html_nodes(read_html(url1),xpath=path)
(strona <- html_table(outn))
strona <- strona[[1]]
LigaWloska <- rbind(LigaWloska,strona)
}
as.data.frame(LigaWloska)
LigaWloska <- LigaWloska[-2]
View(LigaAngielska)
View(LigaFrancuska)
View(LigaNiemiecka)
install.packages("ggmap")
library(ggmap)
install.packages("mapproj")
library(mapproj)
map <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
map <- get_map(location = 'Europe', zoom = 4)
newmap <- getMap(resolution = "low")
> plot(newmap)
plot(newmap)
map <- get_map(location = 'Europe', source = "osm", zoom = 4)
ggmap(map)
?register_google
ggmap_show_api_key()
showing_key()
(w10000 <- sample(1:1000000,10000,replace=T))
mmerge<-function(a,b) {
r<-numeric(length(a)+length(b))
ai<-1; bi<-1; j<-1;
for(j in 1:length(r)) {
if((ai<=length(a) && a[ai]<b[bi]) || bi>length(b)) {
ai <- ai+1
} else {
r[j] <- b[bi]
bi <- bi+1
}
}
r
}
mmergesort<-function(A) {
if(length(A)>1) {
q <- ceiling(length(A)/2)
a <- mmergesort(A[1:q])
b <- mmergesort(A[(q+1):length(A)])
mmerge(a,b)
} else {
A
}
}
mmergesort(w10000)
mmergesort<-function(A) {
if(length(A)>1) {
q <- ceiling(length(A)/2)
a <- mmergesort(A[1:q])
b <- mmergesort(A[(q+1):length(A)])
mmerge(a,b)
} else {
A
}
}
mmerge<-function(a,b) {
r<-numeric(length(a)+length(b))
ai<-1; bi<-1; j<-1;
for(j in 1:length(r)) {
if((ai<=length(a) && a[ai]<b[bi]) || bi>length(b)) {
ai <- ai+1
} else {
r[j] <- b[bi]
bi <- bi+1
}
}
r
}
mmergesort<-function(A) {
if(length(A)>1) {
q <- ceiling(length(A)/2)
a <- mmergesort(A[1:q])
b <- mmergesort(A[(q+1):length(A)])
mmerge(a,b)
} else {
A
}
}
mmergesort(w10000)
mmergesort(w100000)
(w10000 <- sample(1:1000000,10000,replace=T))
(w100000 <- sample(1:1000000,100000,replace=T))
(w1000000 <- sample(1:1000000,1000000,replace=T))
mmerge<-function(a,b) {
r<-numeric(length(a)+length(b))
ai<-1; bi<-1; j<-1;
for(j in 1:length(r)) {
if((ai<=length(a) && a[ai]<b[bi]) || bi>length(b)) {
ai <- ai+1
} else {
r[j] <- b[bi]
bi <- bi+1
}
}
r
}
mmergesort<-function(A) {
if(length(A)>1) {
q <- ceiling(length(A)/2)
a <- mmergesort(A[1:q])
b <- mmergesort(A[(q+1):length(A)])
mmerge(a,b)
} else {
A
}
}
mmergesort(w10000)
mmergesort(w100000)
mmergesort(w1000000)
G <- 6.67430e-11 # stała grawitacyjna
m1 <- 5.972e24 # masa Ziemi
x1 <- 149.6e9 # położenie początkowe Ziemi w osi x
y1 <- 0 # położenie początkowe Ziemi w osi y
vx1 <- 0 # prędkość początkowa Ziemi w osi x
vy1 <- 29.783e3 # prędkość początkowa Ziemi w osi y
dt <- 3600 # krok czasu: 1 godzina
t_max <- 365*24*3600 # maksymalny czas symulacji: 1 rok
t <- 0
while (t < t_max) {
x1 <- x1 + dt*vx1
y1 <- y1 + dt*vy1
vx1 <- vx1 - dt*G*m1*x1/(x1^2 + y1^2)^(3/2)
vy1 <- vy1 - dt*G*m1*y1/(x1^2 + y1^2)^(3/2)
t <- t + dt
}
plot(x1, y1)
G <- 6.67430*e^11 # stała grawitacyjna
m1 <- 5.972*e^24 # masa Ziemi
x1 <- 149.6*e^9 # położenie początkowe Ziemi w osi x
y1 <- 0 # położenie początkowe Ziemi w osi y
vx1 <- 0 # prędkość początkowa Ziemi w osi x
vy1 <- 29.783*e^3 # prędkość początkowa Ziemi w osi y
dt <- 3600 # krok czasu: 1 godzina
t_max <- 365*24*3600 # maksymalny czas symulacji: 1 rok
t <- 0
while (t < t_max) {
x1 <- x1 + dt*vx1
y1 <- y1 + dt*vy1
vx1 <- vx1 - dt*G*m1*x1/(x1^2 + y1^2)^(3/2)
vy1 <- vy1 - dt*G*m1*y1/(x1^2 + y1^2)^(3/2)
t <- t + dt
}
plot(x1, y1)
G <- 6.67430*e^11 # stała grawitacyjna
m1 <- 5.972*e^24 # masa Ziemi
x1 <- 149.6*e^9 # położenie początkowe Ziemi w osi x
y1 <- 0 # położenie początkowe Ziemi w osi y
vx1 <- 0 # prędkość początkowa Ziemi w osi x
vy1 <- 29.783*e^3 # prędkość początkowa Ziemi w osi y
dt <- 3600/100 # krok czasu: 1 godzina
t_max <- 365*24*3600 # maksymalny czas symulacji: 1 rok
t <- 0
while (t < t_max) {
x1 <- x1 + dt*vx1
y1 <- y1 + dt*vy1
vx1 <- vx1 - dt*G*m1*x1/(x1^2 + y1^2)^(3/2)
vy1 <- vy1 - dt*G*m1*y1/(x1^2 + y1^2)^(3/2)
t <- t + dt
}
plot(x1, y1)
G <- 6.67430*e^11 # stała grawitacyjna
m1 <- 5.972*e^24 # masa Ziemi
x1 <- 149.6*e^9 # położenie początkowe Ziemi w osi x
y1 <- 0 # położenie początkowe Ziemi w osi y
vx1 <- 0 # prędkość początkowa Ziemi w osi x
vy1 <- 29.783*e^3 # prędkość początkowa Ziemi w osi y
e <- 2.71
G <- 6.67430*e^11 # stała grawitacyjna
m1 <- 5.972*e^24 # masa Ziemi
x1 <- 149.6*e^9 # położenie początkowe Ziemi w osi x
y1 <- 0 # położenie początkowe Ziemi w osi y
vx1 <- 0 # prędkość początkowa Ziemi w osi x
vy1 <- 29.783*e^3 # prędkość początkowa Ziemi w osi y
dt <- 3600/100 # krok czasu: 1 godzina
t_max <- 365*24*3600 # maksymalny czas symulacji: 1 rok
t <- 0
wektor <- c()
wektor1 <- c()
while (t < t_max) {
x1 <- x1 + dt*vx1
wektor <- c(wektor, x1)
y1 <- y1 + dt*vy1
wektor1 <- c(wektor1, y1)
vx1 <- vx1 - dt*G*m1*x1/(x1^2 + y1^2)^(3/2)
vy1 <- vy1 - dt*G*m1*y1/(x1^2 + y1^2)^(3/2)
t <- t + dt
}
library(tidyverse)
library(deSolve)
logistic_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N * (1 - N/K)
return(list(c(dN)))
})
}
initial_state <- c(N = 100)
parameters <- c(r = 0.2, K = 500)
time <- seq(0, 50, by = 1)
output <- ode(y = initial_state, times = time, func = logistic_model, parms = parameters)
install.packages("deSolve")
library(deSolve)
logistic_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N * (1 - N/K)
return(list(c(dN)))
})
}
initial_state <- c(N = 100)
parameters <- c(r = 0.2, K = 500)
time <- seq(0, 50, by = 1)
output <- ode(y = initial_state, times = time, func = logistic_model, parms = parameters)
ggplot(data = output, aes(x = time, y = N)) + geom_line()
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line()
library(tidyverse)
library(deSolve)
logistic_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N * (1 - N/K)
return(list(c(dN)))
})
}
initial_state <- c(N = 100)
parameters <- c(r = 0.2, K = 500)
time <- seq(0, 50, by = 1)
output <- ode(y = initial_state, times = time, func = logistic_model, parms = parameters)
ggplot(data = as.data.frame(output), aes(x = time, y = N)) + geom_line()
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"))
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold"))
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold"),
title = "Model logistyczny Verhulsta ")
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta")
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta", hjust = 0.5)
library(ggplot2)
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta", hjust = 0.5)
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta", hjust = 0.5, face = "bold")
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta" face = "bold")
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta")
setwd('C:/Users/48788/OneDrive/Pulpit/nauka/SEMESTR 3/Równania różniczkowe/Projekt')
getwd()
# define the differential equation
malthus_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N
return(list(c(dN)))
})
}
# set the initial conditions and parameters
initial_state <- c(N = 100)
parameters <- c(r = 0.1)
# simulate the model for 50 time steps
output <- as.data.frame(ode(y = initial_state, times = 0:50, func = malthus_model, parms = parameters))
# plot the results
ggplot(data = output, aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
ggtitle("Model populacji Malthusa") +
xlab("Czas") +
ylab("Liczba osobników")
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta") +
xlab("Czas") +
ylab("Liczba osobników")
output <- ode(y = initial_state, times = time, func = logistic_model, parms = parameters)
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta") +
xlab("Czas") +
ylab("Liczba osobników")
logistic_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N * (1 - N/K)
return(list(c(dN)))
})
}
initial_state <- c(N = 500)
parameters <- c(r = 0.4, K = 100)
time <- seq(0, 50, by = 1)
output <- ode(y = initial_state, times = time, func = logistic_model, parms = parameters)
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta") +
xlab("Czas") +
ylab("Liczba osobników")
logistic_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N * (1 - N/K)
return(list(c(dN)))
})
}
initial_state <- c(N = 500)
parameters <- c(r = 0.4, K = 100)
time <- seq(0, 50, by = 1)
output <- ode(y = initial_state, times = time, func = logistic_model, parms = parameters)
ggplot(data = as.data.frame(output), aes(x = time, y = N)) +
geom_line(size = 2, color = "red") +
theme(plot.background = element_rect(fill = "lightblue"),
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 16, face = "bold")) +
ggtitle("Model logistyczny Verhulsta") +
xlab("Czas") +
ylab("Liczba osobników")
